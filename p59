Last login: Sat Mar 19 08:16:09 on ttys000
(base) alexbearden@Alexs-MacBook-Air ~ % ipython
Python 3.9.5 (default, May 18 2021, 12:31:01) 
Type 'copyright', 'credits' or 'license' for more information
IPython 7.29.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: import requests

In [2]: req = requests.get(https://projecteuler.net/project/resources/p059_ciphe
   ...: r.txt)
  File "<ipython-input-2-8524e1147139>", line 1
    req = requests.get(https://projecteuler.net/project/resources/p059_cipher.txt)
                            ^
SyntaxError: invalid syntax


In [3]: req = requests.get('https://projecteuler.net/project/resources/p059_ciph
   ...: er.txt')


In [4]: data = req.text

In [5]: len(data)
Out[5]: 4062

In [6]: data
Out[6]: '36,22,80,0,0,4,23,25,19,17,88,4,4,19,21,11,88,22,23,23,29,69,12,24,0,88,25,11,12,2,10,28,5,6,12,25,10,22,80,10,30,80,10,22,21,69,23,22,69,61,5,9,29,2,66,11,80,8,23,3,17,88,19,0,20,21,7,10,17,17,29,20,69,8,17,21,29,2,22,84,80,71,60,21,69,11,5,8,21,25,22,88,3,0,10,25,0,10,5,8,88,2,0,27,25,21,10,31,6,25,2,16,21,82,69,35,63,11,88,4,13,29,80,22,13,29,22,88,31,3,88,3,0,10,25,0,11,80,10,30,80,23,29,19,12,8,2,10,27,17,9,11,45,95,88,57,69,16,17,19,29,80,23,29,19,0,22,4,9,1,80,3,23,5,11,28,92,69,9,5,12,12,21,69,13,30,0,0,0,0,27,4,0,28,28,28,84,80,4,22,80,0,20,21,2,25,30,17,88,21,29,8,2,0,11,3,12,23,30,69,30,31,23,88,4,13,29,80,0,22,4,12,10,21,69,11,5,8,88,31,3,88,4,13,17,3,69,11,21,23,17,21,22,88,65,69,83,80,84,87,68,69,83,80,84,87,73,69,83,80,84,87,65,83,88,91,69,29,4,6,86,92,69,15,24,12,27,24,69,28,21,21,29,30,1,11,80,10,22,80,17,16,21,69,9,5,4,28,2,4,12,5,23,29,80,10,30,80,17,16,21,69,27,25,23,27,28,0,84,80,22,23,80,17,16,17,17,88,25,3,88,4,13,29,80,17,10,5,0,88,3,16,21,80,10,30,80,17,16,25,22,88,3,0,10,25,0,11,80,12,11,80,10,26,4,4,17,30,0,28,92,69,30,2,10,21,80,12,12,80,4,12,80,10,22,19,0,88,4,13,29,80,20,13,17,1,10,17,17,13,2,0,88,31,3,88,4,13,29,80,6,17,2,6,20,21,69,30,31,9,20,31,18,11,94,69,54,17,8,29,28,28,84,80,44,88,24,4,14,21,69,30,31,16,22,20,69,12,24,4,12,80,17,16,21,69,11,5,8,88,31,3,88,4,13,17,3,69,11,21,23,17,21,22,88,25,22,88,17,69,11,25,29,12,24,69,8,17,23,12,80,10,30,80,17,16,21,69,11,1,16,25,2,0,88,31,3,88,4,13,29,80,21,29,2,12,21,21,17,29,2,69,23,22,69,12,24,0,88,19,12,10,19,9,29,80,18,16,31,22,29,80,1,17,17,8,29,4,0,10,80,12,11,80,84,67,80,10,10,80,7,1,80,21,13,4,17,17,30,2,88,4,13,29,80,22,13,29,69,23,22,69,12,24,12,11,80,22,29,2,12,29,3,69,29,1,16,25,28,69,12,31,69,11,92,69,17,4,69,16,17,22,88,4,13,29,80,23,25,4,12,23,80,22,9,2,17,80,70,76,88,29,16,20,4,12,8,28,12,29,20,69,26,9,69,11,80,17,23,80,84,88,31,3,88,4,13,29,80,21,29,2,12,21,21,17,29,2,69,12,31,69,12,24,0,88,20,12,25,29,0,12,21,23,86,80,44,88,7,12,20,28,69,11,31,10,22,80,22,16,31,18,88,4,13,25,4,69,12,24,0,88,3,16,21,80,10,30,80,17,16,25,22,88,3,0,10,25,0,11,80,17,23,80,7,29,80,4,8,0,23,23,8,12,21,17,17,29,28,28,88,65,75,78,68,81,65,67,81,72,70,83,64,68,87,74,70,81,75,70,81,67,80,4,22,20,69,30,2,10,21,80,8,13,28,17,17,0,9,1,25,11,31,80,17,16,25,22,88,30,16,21,18,0,10,80,7,1,80,22,17,8,73,88,17,11,28,80,17,16,21,11,88,4,4,19,25,11,31,80,17,16,21,69,11,1,16,25,2,0,88,2,10,23,4,73,88,4,13,29,80,11,13,29,7,29,2,69,75,94,84,76,65,80,65,66,83,77,67,80,64,73,82,65,67,87,75,72,69,17,3,69,17,30,1,29,21,1,88,0,23,23,20,16,27,21,1,84,80,18,16,25,6,16,80,0,0,0,23,29,3,22,29,3,69,12,24,0,88,0,0,10,25,8,29,4,0,10,80,10,30,80,4,88,19,12,10,19,9,29,80,18,16,31,22,29,80,1,17,17,8,29,4,0,10,80,12,11,80,84,86,80,35,23,28,9,23,7,12,22,23,69,25,23,4,17,30,69,12,24,0,88,3,4,21,21,69,11,4,0,8,3,69,26,9,69,15,24,12,27,24,69,49,80,13,25,20,69,25,2,23,17,6,0,28,80,4,12,80,17,16,25,22,88,3,16,21,92,69,49,80,13,25,6,0,88,20,12,11,19,10,14,21,23,29,20,69,12,24,4,12,80,17,16,21,69,11,5,8,88,31,3,88,4,13,29,80,22,29,2,12,29,3,69,73,80,78,88,65,74,73,70,69,83,80,84,87,72,84,88,91,69,73,95,87,77,70,69,83,80,84,87,70,87,77,80,78,88,21,17,27,94,69,25,28,22,23,80,1,29,0,0,22,20,22,88,31,11,88,4,13,29,80,20,13,17,1,10,17,17,13,2,0,88,31,3,88,4,13,29,80,6,17,2,6,20,21,75,88,62,4,21,21,9,1,92,69,12,24,0,88,3,16,21,80,10,30,80,17,16,25,22,88,29,16,20,4,12,8,28,12,29,20,69,26,9,69,65,64,69,31,25,19,29,3,69,12,24,0,88,18,12,9,5,4,28,2,4,12,21,69,80,22,10,13,2,17,16,80,21,23,7,0,10,89,69,23,22,69,12,24,0,88,19,12,10,19,16,21,22,0,10,21,11,27,21,69,23,22,69,12,24,0,88,0,0,10,25,8,29,4,0,10,80,10,30,80,4,88,19,12,10,19,9,29,80,18,16,31,22,29,80,1,17,17,8,29,4,0,10,80,12,11,80,84,86,80,36,22,20,69,26,9,69,11,25,8,17,28,4,10,80,23,29,17,22,23,30,12,22,23,69,49,80,13,25,6,0,88,28,12,19,21,18,17,3,0,88,18,0,29,30,69,25,18,9,29,80,17,23,80,1,29,4,0,10,29,12,22,21,69,12,24,0,88,3,16,21,3,69,23,22,69,12,24,0,88,3,16,26,3,0,9,5,0,22,4,69,11,21,23,17,21,22,88,25,11,88,7,13,17,19,13,88,4,13,29,80,0,0,0,10,22,21,11,12,3,69,25,2,0,88,21,19,29,30,69,22,5,8,26,21,23,11,94'

In [7]: len(data) % 3
Out[7]: 0

In [8]: ','.split(data)
Out[8]: [',']

In [9]: new_data = ','.split(data)

In [10]: new_data
Out[10]: [',']

In [11]: data.split?
Signature: data.split(sep=None, maxsplit=-1)
Docstring:
Return a list of the words in the string, using sep as the delimiter string.

sep
  The delimiter according which to split the string.
  None (the default value) means split according to any whitespace,
  and discard empty strings from the result.
maxsplit
  Maximum number of splits to do.
  -1 (the default value) means no limit.
Type:      builtin_function_or_method

In [12]: new_data = data.split(sep=',')

In [13]: new_data
Out[13]: 
['36',
 '22',
 '80',
 '0',
 '0',
 '4',
 '23',
 '25',
 '19',
 '17',
 '88',
 '4',
 '4',
 '19',
 '21',
 '11',
 '88',
 '22',
 '23',
 '23',
 '29',
 '69',
 '12',
 '24',
 '0',
 '88',
 '25',
 '11',
 '12',
 '2',
 '10',
 '28',
 '5',
 '6',
 '12',
 '25',
 '10',
 '22',
 '80',
 '10',
 '30',
 '80',
 '10',
 '22',
 '21',
 '69',
 '23',
 '22',
 '69',
 '61',
 '5',
 '9',
 '29',
 '2',
 '66',
 '11',
 '80',
 '8',
 '23',
 '3',
 '17',
 '88',
 '19',
 '0',
 '20',
 '21',
 '7',
 '10',
 '17',
 '17',
 '29',
 '20',
 '69',
 '8',
 '17',
 '21',
 '29',
 '2',
 '22',
 '84',
 '80',
 '71',
 '60',
 '21',
 '69',
 '11',
 '5',
 '8',
 '21',
 '25',
 '22',
 '88',
 '3',
 '0',
 '10',
 '25',
 '0',
 '10',
 '5',
 '8',
 '88',
 '2',
 '0',
 '27',
 '25',
 '21',
 '10',
 '31',
 '6',
 '25',
 '2',
 '16',
 '21',
 '82',
 '69',
 '35',
 '63',
 '11',
 '88',
 '4',
 '13',
 '29',
 '80',
 '22',
 '13',
 '29',
 '22',
 '88',
 '31',
 '3',
 '88',
 '3',
 '0',
 '10',
 '25',
 '0',
 '11',
 '80',
 '10',
 '30',
 '80',
 '23',
 '29',
 '19',
 '12',
 '8',
 '2',
 '10',
 '27',
 '17',
 '9',
 '11',
 '45',
 '95',
 '88',
 '57',
 '69',
 '16',
 '17',
 '19',
 '29',
 '80',
 '23',
 '29',
 '19',
 '0',
 '22',
 '4',
 '9',
 '1',
 '80',
 '3',
 '23',
 '5',
 '11',
 '28',
 '92',
 '69',
 '9',
 '5',
 '12',
 '12',
 '21',
 '69',
 '13',
 '30',
 '0',
 '0',
 '0',
 '0',
 '27',
 '4',
 '0',
 '28',
 '28',
 '28',
 '84',
 '80',
 '4',
 '22',
 '80',
 '0',
 '20',
 '21',
 '2',
 '25',
 '30',
 '17',
 '88',
 '21',
 '29',
 '8',
 '2',
 '0',
 '11',
 '3',
 '12',
 '23',
 '30',
 '69',
 '30',
 '31',
 '23',
 '88',
 '4',
 '13',
 '29',
 '80',
 '0',
 '22',
 '4',
 '12',
 '10',
 '21',
 '69',
 '11',
 '5',
 '8',
 '88',
 '31',
 '3',
 '88',
 '4',
 '13',
 '17',
 '3',
 '69',
 '11',
 '21',
 '23',
 '17',
 '21',
 '22',
 '88',
 '65',
 '69',
 '83',
 '80',
 '84',
 '87',
 '68',
 '69',
 '83',
 '80',
 '84',
 '87',
 '73',
 '69',
 '83',
 '80',
 '84',
 '87',
 '65',
 '83',
 '88',
 '91',
 '69',
 '29',
 '4',
 '6',
 '86',
 '92',
 '69',
 '15',
 '24',
 '12',
 '27',
 '24',
 '69',
 '28',
 '21',
 '21',
 '29',
 '30',
 '1',
 '11',
 '80',
 '10',
 '22',
 '80',
 '17',
 '16',
 '21',
 '69',
 '9',
 '5',
 '4',
 '28',
 '2',
 '4',
 '12',
 '5',
 '23',
 '29',
 '80',
 '10',
 '30',
 '80',
 '17',
 '16',
 '21',
 '69',
 '27',
 '25',
 '23',
 '27',
 '28',
 '0',
 '84',
 '80',
 '22',
 '23',
 '80',
 '17',
 '16',
 '17',
 '17',
 '88',
 '25',
 '3',
 '88',
 '4',
 '13',
 '29',
 '80',
 '17',
 '10',
 '5',
 '0',
 '88',
 '3',
 '16',
 '21',
 '80',
 '10',
 '30',
 '80',
 '17',
 '16',
 '25',
 '22',
 '88',
 '3',
 '0',
 '10',
 '25',
 '0',
 '11',
 '80',
 '12',
 '11',
 '80',
 '10',
 '26',
 '4',
 '4',
 '17',
 '30',
 '0',
 '28',
 '92',
 '69',
 '30',
 '2',
 '10',
 '21',
 '80',
 '12',
 '12',
 '80',
 '4',
 '12',
 '80',
 '10',
 '22',
 '19',
 '0',
 '88',
 '4',
 '13',
 '29',
 '80',
 '20',
 '13',
 '17',
 '1',
 '10',
 '17',
 '17',
 '13',
 '2',
 '0',
 '88',
 '31',
 '3',
 '88',
 '4',
 '13',
 '29',
 '80',
 '6',
 '17',
 '2',
 '6',
 '20',
 '21',
 '69',
 '30',
 '31',
 '9',
 '20',
 '31',
 '18',
 '11',
 '94',
 '69',
 '54',
 '17',
 '8',
 '29',
 '28',
 '28',
 '84',
 '80',
 '44',
 '88',
 '24',
 '4',
 '14',
 '21',
 '69',
 '30',
 '31',
 '16',
 '22',
 '20',
 '69',
 '12',
 '24',
 '4',
 '12',
 '80',
 '17',
 '16',
 '21',
 '69',
 '11',
 '5',
 '8',
 '88',
 '31',
 '3',
 '88',
 '4',
 '13',
 '17',
 '3',
 '69',
 '11',
 '21',
 '23',
 '17',
 '21',
 '22',
 '88',
 '25',
 '22',
 '88',
 '17',
 '69',
 '11',
 '25',
 '29',
 '12',
 '24',
 '69',
 '8',
 '17',
 '23',
 '12',
 '80',
 '10',
 '30',
 '80',
 '17',
 '16',
 '21',
 '69',
 '11',
 '1',
 '16',
 '25',
 '2',
 '0',
 '88',
 '31',
 '3',
 '88',
 '4',
 '13',
 '29',
 '80',
 '21',
 '29',
 '2',
 '12',
 '21',
 '21',
 '17',
 '29',
 '2',
 '69',
 '23',
 '22',
 '69',
 '12',
 '24',
 '0',
 '88',
 '19',
 '12',
 '10',
 '19',
 '9',
 '29',
 '80',
 '18',
 '16',
 '31',
 '22',
 '29',
 '80',
 '1',
 '17',
 '17',
 '8',
 '29',
 '4',
 '0',
 '10',
 '80',
 '12',
 '11',
 '80',
 '84',
 '67',
 '80',
 '10',
 '10',
 '80',
 '7',
 '1',
 '80',
 '21',
 '13',
 '4',
 '17',
 '17',
 '30',
 '2',
 '88',
 '4',
 '13',
 '29',
 '80',
 '22',
 '13',
 '29',
 '69',
 '23',
 '22',
 '69',
 '12',
 '24',
 '12',
 '11',
 '80',
 '22',
 '29',
 '2',
 '12',
 '29',
 '3',
 '69',
 '29',
 '1',
 '16',
 '25',
 '28',
 '69',
 '12',
 '31',
 '69',
 '11',
 '92',
 '69',
 '17',
 '4',
 '69',
 '16',
 '17',
 '22',
 '88',
 '4',
 '13',
 '29',
 '80',
 '23',
 '25',
 '4',
 '12',
 '23',
 '80',
 '22',
 '9',
 '2',
 '17',
 '80',
 '70',
 '76',
 '88',
 '29',
 '16',
 '20',
 '4',
 '12',
 '8',
 '28',
 '12',
 '29',
 '20',
 '69',
 '26',
 '9',
 '69',
 '11',
 '80',
 '17',
 '23',
 '80',
 '84',
 '88',
 '31',
 '3',
 '88',
 '4',
 '13',
 '29',
 '80',
 '21',
 '29',
 '2',
 '12',
 '21',
 '21',
 '17',
 '29',
 '2',
 '69',
 '12',
 '31',
 '69',
 '12',
 '24',
 '0',
 '88',
 '20',
 '12',
 '25',
 '29',
 '0',
 '12',
 '21',
 '23',
 '86',
 '80',
 '44',
 '88',
 '7',
 '12',
 '20',
 '28',
 '69',
 '11',
 '31',
 '10',
 '22',
 '80',
 '22',
 '16',
 '31',
 '18',
 '88',
 '4',
 '13',
 '25',
 '4',
 '69',
 '12',
 '24',
 '0',
 '88',
 '3',
 '16',
 '21',
 '80',
 '10',
 '30',
 '80',
 '17',
 '16',
 '25',
 '22',
 '88',
 '3',
 '0',
 '10',
 '25',
 '0',
 '11',
 '80',
 '17',
 '23',
 '80',
 '7',
 '29',
 '80',
 '4',
 '8',
 '0',
 '23',
 '23',
 '8',
 '12',
 '21',
 '17',
 '17',
 '29',
 '28',
 '28',
 '88',
 '65',
 '75',
 '78',
 '68',
 '81',
 '65',
 '67',
 '81',
 '72',
 '70',
 '83',
 '64',
 '68',
 '87',
 '74',
 '70',
 '81',
 '75',
 '70',
 '81',
 '67',
 '80',
 '4',
 '22',
 '20',
 '69',
 '30',
 '2',
 '10',
 '21',
 '80',
 '8',
 '13',
 '28',
 '17',
 '17',
 '0',
 '9',
 '1',
 '25',
 '11',
 '31',
 '80',
 '17',
 '16',
 '25',
 '22',
 '88',
 '30',
 '16',
 '21',
 '18',
 '0',
 '10',
 '80',
 '7',
 '1',
 '80',
 '22',
 '17',
 '8',
 '73',
 '88',
 '17',
 '11',
 '28',
 '80',
 '17',
 '16',
 '21',
 '11',
 '88',
 '4',
 '4',
 '19',
 '25',
 '11',
 '31',
 '80',
 '17',
 '16',
 '21',
 '69',
 '11',
 '1',
 '16',
 '25',
 '2',
 '0',
 '88',
 '2',
 '10',
 '23',
 '4',
 '73',
 '88',
 '4',
 '13',
 '29',
 '80',
 '11',
 '13',
 '29',
 '7',
 '29',
 '2',
 '69',
 '75',
 '94',
 '84',
 '76',
 '65',
 '80',
 '65',
 '66',
 '83',
 '77',
 '67',
 '80',
 '64',
 '73',
 '82',
 '65',
 '67',
 '87',
 '75',
 '72',
 '69',
 '17',
 '3',
 '69',
 '17',
 '30',
 '1',
 '29',
 '21',
 '1',
 '88',
 '0',
 '23',
 '23',
 '20',
 '16',
 '27',
 '21',
 '1',
 '84',
 '80',
 '18',
 '16',
 '25',
 '6',
 '16',
 '80',
 '0',
 '0',
 '0',
 '23',
 '29',
 '3',
 '22',
 '29',
 '3',
 '69',
 '12',
 '24',
 '0',
 '88',
 '0',
 '0',
 '10',
 '25',
 '8',
 '29',
 '4',
 '0',
 '10',
 '80',
 '10',
 '30',
 '80',
 '4',
 '88',
 '19',
 '12',
 '10',
 '19',
 '9',
 '29',
 '80',
 '18',
 '16',
 '31',
 '22',
 '29',
 '80',
 '1',
 '17',
 '17',
 '8',
 '29',
 '4',
 '0',
 '10',
 '80',
 '12',
 '11',
 '80',
 '84',
 '86',
 '80',
 '35',
 '23',
 '28',
 '9',
 '23',
 '7',
 '12',
 '22',
 '23',
 '69',
 '25',
 '23',
 '4',
 '17',
 '30',
 '69',
 '12',
 '24',
 '0',
 '88',
 '3',
 '4',
 '21',
 '21',
 '69',
 '11',
 '4',
 '0',
 ...]

In [14]: data = data.split(sep=',')

In [15]: data[:3]
Out[15]: ['36', '22', '80']

In [16]: data[:5]
Out[16]: ['36', '22', '80', '0', '0']

In [17]: from collections import Counter

In [18]: Counter(text2).order
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-18-1509884ee830> in <module>
----> 1 Counter(text2).order

NameError: name 'text2' is not defined

In [19]: Counter(text).order
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-19-08040b76fdf2> in <module>
----> 1 Counter(text).order

NameError: name 'text' is not defined

In [20]: Counter(data).order
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-20-8ad12349a685> in <module>
----> 1 Counter(data).order

AttributeError: 'Counter' object has no attribute 'order'

In [21]: Counter(data)?
  File "<ipython-input-21-97c3cd80ff70>", line 1
    Counter(data)?
                 ^
SyntaxError: invalid syntax


In [22]: Counter(data)
Out[22]: 
Counter({'36': 2,
         '22': 56,
         '80': 107,
         '0': 75,
         '4': 61,
         '23': 46,
         '25': 42,
         '19': 21,
         '17': 73,
         '88': 77,
         '21': 65,
         '11': 43,
         '29': 70,
         '69': 86,
         '12': 65,
         '24': 21,
         '2': 31,
         '10': 52,
         '28': 25,
         '5': 15,
         '6': 11,
         '30': 26,
         '61': 1,
         '9': 20,
         '66': 2,
         '8': 25,
         '3': 36,
         '20': 22,
         '7': 9,
         '84': 16,
         '71': 1,
         '60': 1,
         '27': 10,
         '31': 24,
         '16': 38,
         '82': 2,
         '35': 2,
         '63': 1,
         '13': 33,
         '45': 1,
         '95': 2,
         '57': 1,
         '1': 19,
         '92': 6,
         '65': 9,
         '83': 8,
         '87': 9,
         '68': 3,
         '73': 7,
         '91': 2,
         '86': 4,
         '15': 2,
         '26': 7,
         '18': 11,
         '94': 4,
         '54': 1,
         '44': 2,
         '14': 2,
         '67': 5,
         '70': 7,
         '76': 2,
         '75': 5,
         '78': 3,
         '81': 4,
         '72': 3,
         '64': 3,
         '74': 2,
         '77': 3,
         '49': 3,
         '62': 1,
         '89': 1})

In [23]: type(Counter(data))
Out[23]: collections.Counter

In [24]: Counter?

In [25]: count = Counter(data)

In [26]: count0 = Counter(data[::3])

In [27]: count1 = Counter(data[1::3])

In [28]: count2 = Counter(data[2::3])

In [29]: Counter?

In [30]: count0.most_common(3)
Out[30]: [('69', 86), ('0', 62), ('12', 34)]

In [31]: count1.most_common(3)
Out[31]: [('88', 77), ('29', 60), ('12', 31)]

In [32]: count2.most_common(3)
Out[32]: [('80', 103), ('21', 42), ('4', 40)]

In [33]: 69 & 69
Out[33]: 69

In [34]: 69 ^ 69
Out[34]: 0

In [35]: chr(0)
Out[35]: '\x00'

In [36]: ord(e)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-36-ceb5261dc59e> in <module>
----> 1 ord(e)

NameError: name 'e' is not defined

In [37]: ord('e')
Out[37]: 101

In [38]: 101 ^ 69
Out[38]: 32

In [39]: count0.most_common(3)
Out[39]: [('69', 86), ('0', 62), ('12', 34)]

In [40]: print(chr(69) + chr(0^32) + chr(12^32))
E ,

In [41]: 12^32
Out[41]: 44

In [42]: chr(44)
Out[42]: ','

In [43]: chr(0)
Out[43]: '\x00'

In [44]: chr(32)
Out[44]: ' '

In [45]: chr(101^12)
Out[45]: 'i'

In [46]: 101^12
Out[46]: 105

In [47]: print(chr(69^105) + chr(0^105) + chr(12^105))
,ie

In [48]: ord(',')
Out[48]: 44

In [49]: 44^69
Out[49]: 105

In [50]: code = [105]

In [51]: count1_mostcommon(3)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-51-78e0022a3862> in <module>
----> 1 count1_mostcommon(3)

NameError: name 'count1_mostcommon' is not defined

In [52]: count1.most_common(3)
Out[52]: [('88', 77), ('29', 60), ('12', 31)]

In [53]: ord('e')
Out[53]: 101

In [54]: 88^101
Out[54]: 61

In [55]: chr(61)
Out[55]: '='

In [56]: 29^101
Out[56]: 120

In [57]: chr(120)
Out[57]: 'x'

In [58]: chr(12^101)
Out[58]: 'i'

In [59]: print(chr(88^120), chr(29^120), chr(12^120))
  e t

In [60]: chr(88^120)
Out[60]: ' '

In [61]: 12^101
Out[61]: 105

In [62]: print(chr(88^105), chr(29^105), chr(12^105))
1 t e

In [63]: code
Out[63]: [105]

In [64]: code.append(120)

In [65]: count2.most_common(3)
Out[65]: [('80', 103), ('21', 42), ('4', 40)]

In [66]: chr(80^101)
Out[66]: '5'

In [67]: chr(21^101)
Out[67]: 'p'

In [68]: chr(4^101)
Out[68]: 'a'

In [69]: 21^101
Out[69]: 112

In [70]: print(chr(80^112), chr(21^112), chr(4^112))
  e t

In [71]: 4^101
Out[71]: 97

In [72]: print(chr(80^97), chr(21^97), chr(4^97))
1 t e

In [73]: code.append(112)

In [74]: code
Out[74]: [105, 120, 112]

In [75]: for l in code:
    ...:     print(chr(l))
    ...: 
i
x
p

In [76]: decoded = ''

In [77]: for i in range(len(data)):
    ...:     if i % 3 == 0:
    ...:         decoded += chr(int(data[i]) ^ code[0])
    ...:     if i % 3 == 1:
    ...:         decoded += chr(int(data[i]) ^ code[1])
    ...:     else:
    ...:         decoded += chr(int(data[i]) ^ code[2])
    ...: 

In [78]: print(decoded)
MTn ipxt~gacxa tmtkeb{ f~gom,5thip ib{trczduovticzn czf czne,5of,5Eu`yer+2s axosxa ciplenwraxaed,5pa|eerf, .7De,5suaxmif sipriipruax ripci|eroovary`m",5[Ob{ td}e fumf ojs sipriips czf ~gece|prczca`ys]6/ I,5hazce ~gecipnt`yy jsoub{d,,5que|te,5unipxpipctipdlul, mtn iplekranxa etmpripsse|on,5fo~g td}e ipnte|re,5suax ojs td}is,5se~gief 1,5+ =$/4,5+ =$/9,5+ =$/1:# +,5etov.,,5whe|ch,5de|eenhqs czn xahe,5qumtdrmttu~ge czf xahe,5ci~gclip, fo xahaxa ijs td}e xaruip sy`m czf xahif sipriips e|s czbtmtinipd,,5frczm e|t mtt czncip td}e }duahqraxaurip ojs td}e ovirovle,5fo`ylo{bs.,5Naaxelul, E\ hmtve,5foy`nd,5thmtt xahe,5suax ojs td}is,5se~gief if a,5sitmth,5pa~gt czf xahe,5sqy`arip ojs td}e |eere|mexaer,5of,5thip ce|rc`ye {bhofe hqiaaxetipr e|s =$; czr nwy |eutxainkr td}e fum,5of,5the|s fere|es,5eqy`al,5to,5s,,5it,5haf td}e ~gate|o fqrxa(6%< my`lte|ple|ed,5by,5s xao =$ ojs td}e |eere|mexaer,5to,5thip de|amipte~g. E\ we|ll,5soczn fho{b td}at,5thip sy`m czf xahif sipriips xao nwe mtpp~goxe|maxaelul 1";648!938!06:#84>'268!368!; mtnd,5frczm axulxaip`yyib{g xahif ny`mbipr nwy fix 9 ab{d xaheb{ tmtkib{g xahe,5sqy`arip rczot 9 td}e b{umnwer,53.=$419 92:#539 89;"93>'38,5is,5inhqeehq p~gody`cehq, {bhiovh ipxp~gesfes,5thip pipriaxetipr czf mt ce|rc`ye {bhofe hqiaaxetipr e|s =$. JSol`yowe|ng,5agmtin,5thip smtme,5stipps,5by,5whe|ch,5I d}ad,5ar~givipd mtt xahif sy`m,,5I d}avip de|scczve~ged,5thmtt xahe,5suax ojs td}e fere|es,51 '> 1#:16,5+ =$/8=$ +,51/>'56,5+ =$/6>'5 '> exac.,5alfo hqepipndf ob{ td}e }duahqraxaurip ojs td}e ovirovle"; Nmtme`yy,,5thip sy`m czf xahif my`lte|ple|ed,5by,590,5gizces,5thip be|qumtdrmtte,5(fczurxah |eowipr),5of,5thip ce|rcy`mfipreb{ce,5of,5thip pipriaxetipr czf mt ce|rc`ye {bhofe hqiaaxetipr e|s =$. MTnd,5by,5siaxilmtr ~geafone|ng,5I d}avip le|ke{bisip bipen,5ab`ye xao hqetiprme|ne,5thip sy`ms,5of,5thip sy`bsipquipnt,5se~gief ib{ wd}icd} td}e ipxpczneb{ts,5arip ezcen,5nuaxbe~gs.

In [79]: def decode(code):
    ...:     decoded = ''
    ...:     for i in range(len(data)):
    ...:         if i % 3 == 0:
    ...:             decoded += chr(int(data[i]) ^ code[0])
    ...:         if i % 3 == 1:
    ...:             decoded += chr(int(data[i]) ^ code[1])
    ...:         else:
    ...:             decoded += chr(int(data[i]) ^ code[2])
    ...:     return decoded
    ...: 

In [80]: count0.most_common(10)
Out[80]: 
[('69', 86),
 ('0', 62),
 ('12', 34),
 ('17', 32),
 ('22', 28),
 ('10', 24),
 ('13', 22),
 ('4', 21),
 ('23', 20),
 ('16', 16)]

In [81]: ord('e')
Out[81]: 101

In [82]: common0 = count0.most_common(10)

In [83]: for p in common0:
    ...:     print(p, int(p[0]^101))
    ...: 
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-83-54d06858b5a1> in <module>
      1 for p in common0:
----> 2     print(p, int(p[0]^101))
      3 

TypeError: unsupported operand type(s) for ^: 'str' and 'int'

In [84]: for p in common0:
    ...:     print(p, int(p[0])^101)
    ...: 
('69', 86) 32
('0', 62) 101
('12', 34) 105
('17', 32) 116
('22', 28) 115
('10', 24) 111
('13', 22) 104
('4', 21) 97
('23', 20) 114
('16', 16) 117

In [85]: for p in common0:
    ...:     print(p, char(int(p[0])^101))
    ...: 
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-85-c605fecd2ad6> in <module>
      1 for p in common0:
----> 2     print(p, char(int(p[0])^101))
      3 

NameError: name 'char' is not defined

In [86]: for p in common0:
    ...:     print(p, chr(int(p[0])^101))
    ...: 
('69', 86)  
('0', 62) e
('12', 34) i
('17', 32) t
('22', 28) s
('10', 24) o
('13', 22) h
('4', 21) a
('23', 20) r
('16', 16) u

In [87]: common0
Out[87]: 
[('69', 86),
 ('0', 62),
 ('12', 34),
 ('17', 32),
 ('22', 28),
 ('10', 24),
 ('13', 22),
 ('4', 21),
 ('23', 20),
 ('16', 16)]

In [88]: for p in common0:
    ...:     print(p, chr(int(p[0])^101), int(p[0])^101)
    ...: 
('69', 86)   32
('0', 62) e 101
('12', 34) i 105
('17', 32) t 116
('22', 28) s 115
('10', 24) o 111
('13', 22) h 104
('4', 21) a 97
('23', 20) r 114
('16', 16) u 117

In [89]: common0
Out[89]: 
[('69', 86),
 ('0', 62),
 ('12', 34),
 ('17', 32),
 ('22', 28),
 ('10', 24),
 ('13', 22),
 ('4', 21),
 ('23', 20),
 ('16', 16)]

In [90]: for p in common0:
    ...:     print(p, chr(int(p[0])^101), int(p[0])^101)
    ...: 
('69', 86)   32
('0', 62) e 101
('12', 34) i 105
('17', 32) t 116
('22', 28) s 115
('10', 24) o 111
('13', 22) h 104
('4', 21) a 97
('23', 20) r 114
('16', 16) u 117

In [91]: code = []

In [92]: poss_code0 = [101, 105, 116, 115, 111]

In [93]: common1 = count1.most_common(10)

In [94]: for p in common1:
    ...:     print(p, chr(int(p[0])^101), int(p[0])^101)
    ...: 
('88', 77) = 61
('29', 60) x 120
('12', 31) i 105
('11', 30) n 110
('10', 28) o 111
('23', 23) r 114
('16', 22) u 117
('17', 22) t 116
('22', 19) s 115
('25', 17) | 124

In [95]: poss_code1 = [120, 105, 110, 111, 114]

In [96]: common2 = count2.most_common(10)

In [97]: for p in common2:
    ...:     print(p, chr(int(p[0])^101), int(p[0])^101)
    ...: 
('80', 103) 5 53
('21', 42) p 112
('4', 40) a 97
('2', 29) g 103
('3', 26) f 102
('25', 25) | 124
('24', 21) } 125
('31', 21) z 122
('17', 19) t 116
('19', 15) v 118

In [98]: poss_code3 = [112, 97, 103, 102]

In [99]: for c1 in poss_code1:
    ...:     for c2 in poss_code2:
    ...:         for c3 in poss_code3:
    ...:             decoded = decode([c1,c2,c3])
    ...:             if 'and' in decoded:
    ...:                 print(decoded[:100])
    ...: 
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-99-7d2b65aebcaa> in <module>
      1 for c1 in poss_code1:
----> 2     for c2 in poss_code2:
      3         for c3 in poss_code3:
      4             decoded = decode([c1,c2,c3])
      5             if 'and' in decoded:

NameError: name 'poss_code2' is not defined

In [100]: poss_code2 = poss_code3

In [101]: for c1 in poss_code0:
     ...:     for c2 in poss_code1:
     ...:         for c3 in poss_code2:
     ...:             decoded = decode([c1,c2,c3])
     ...:             if 'and' in decoded:
     ...:                 print(decoded[:100])
     ...: 
MB6ifib~qpuxw1bmbzsbm1p~q~{,#e~if1bmedcluco`ecl6clw6cls,#~p,#Tc`otd+$b6an~exw1uif}snacwxwtr,#aw

In [102]: for p in common0:
     ...:     print(p, chr(int(p[0])^101), int(p[0])^101)
     ...: 
('69', 86)   32
('0', 62) e 101
('12', 34) i 105
('17', 32) t 116
('22', 28) s 115
('10', 24) o 111
('13', 22) h 104
('4', 21) a 97
('23', 20) r 114
('16', 16) u 117

In [103]: posscode0 = [101,105,116,115,111,104,97,114,117]

In [104]: for p in common1:
     ...:     print(p, chr(int(p[0])^101), int(p[0])^101)
     ...: 
('88', 77) = 61
('29', 60) x 120
('12', 31) i 105
('11', 30) n 110
('10', 28) o 111
('23', 23) r 114
('16', 22) u 117
('17', 22) t 116
('22', 19) s 115
('25', 17) | 124

In [105]: posscode1 = [120,105,110,111,114,117,116,115]

In [106]: for p in common2:
     ...:     print(p, chr(int(p[0])^101), int(p[0])^101)
     ...: 
('80', 103) 5 53
('21', 42) p 112
('4', 40) a 97
('2', 29) g 103
('3', 26) f 102
('25', 25) | 124
('24', 21) } 125
('31', 21) z 122
('17', 19) t 116
('19', 15) v 118

In [107]: posscode2 = [53,112,97,103,102,122,116,118]

In [108]: for c1 in poss_code0:
     ...:     for c2 in poss_code1:
     ...:         for c3 in poss_code2:
     ...:             decoded = decode([c1,c2,c3])
     ...:             if 'and' in decoded:
     ...:                 print([c1,c2,c3])
     ...:                 print(decoded[:100])
     ...: 
[105, 105, 102]
MB6ifib~qpuxw1bmbzsbm1p~q~{,#e~if1bmedcluco`ecl6clw6cls,#~p,#Tc`otd+$b6an~exw1uif}snacwxwtr,#aw

In [109]: for c1 in poss_code0:
     ...:     for c2 in poss_code1:
     ...:         for c3 in poss_code2:
     ...:             decoded = decode([c1,c2,c3])
     ...:             if 'the' in decoded:
     ...:                 print([c1,c2,c3])
     ...:                 print(decoded[:100])
     ...: 
[101, 120, 112]
ATn epxtrgacta tatken{ frgom 5thep in{trozducvtiozn ozf ozne 5of 5Eulyer'2s mxosta ceplebwrataed 5pa
[105, 120, 112]
MTn ipxt~gacxa tmtkeb{ f~gom,5thip ib{trczduovticzn czf czne,5of,5Eu`yer+2s axosxa ciplenwraxaed,5pa

In [110]: print(decode(101,120,112))
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-110-ef04c1cf328d> in <module>
----> 1 print(decode(101,120,112))

TypeError: decode() takes 1 positional argument but 3 were given

In [111]: print(decode([101,120,112]))
ATn epxtrgacta tatken{ frgom 5thep in{trozducvtiozn ozf ozne 5of 5Eulyer'2s mxosta ceplebwrataed 5papeersf, "7De 5sumxmisf seprieprumx repciperocvaru`m" 5[On{ th}e sfumsf ofs seprieps ozf rgeci|prozcalys]:/ I 5havce rgecepntlyy fsoun{d, 5qui|te 5unepxpepctepdlyl, atn eplegranta exmprepssi|on 5forg th}e epnti|re 5sumx ofs th}is 5sergiesf 1 5+ 1$/4 5+ 1$/9 5+ 1$/16# + 5etcv., 5whi|ch 5depeendqs ozn tahe 5quatdratturge ozf tahe 5cirgclep, sfo tahata ifs th}e taruep su`m ozf tahisf seprieps i|s ozbtatinepd, 5frozm i|t att ozncep th}e qduadqrataurep ofs th}e cvircvle 5folylowbs. 5Namxelyl, I\ hatve 5fou`nd 5thatt tahe 5sumx ofs th}is 5sergiesf isf a 5sixmth 5pargt ozf tahe 5squ`arep ofs th}e peeri|metaer 5of 5thep ci|rclye wbhosfe dqiamxetepr i|s 1$; ozr bwy peuttaingr th}e sfum 5of 5thi|s sferi|es 5equ`al 5to 5s, 5it 5hasf th}e rgati|o sfqrta(6)< mu`lti|pli|ed 5by 5s tao 1$ ofs th}e peeri|metaer 5to 5thep di|amepterg. I\ wi|ll 5soozn sfhowb th}at 5thep su`m ozf tahisf seprieps tao bwe atpprgoxi|mataelyl 1.;644!934!066#842'264!364!; atnd 5frozm mxultaiplyyin{g tahisf nu`mbepr bwy sfix,9 an{d tahen{ tatkin{g tahe 5squ`arep rozot,9 th}e n{umbwer 53.1$415 926#535 897"932'38 5is 5indqeedq prgodu`cedq, wbhicvh epxprgessfes 5thep peprimxetepr ozf at ci|rclye wbhosfe dqiamxetepr i|s 1$. FSollyowi|ng 5agatin 5thep satme 5stepps 5by 5whi|ch 5I h}ad 5arrgivepd att tahisf su`m, 5I h}avep di|scozverged 5thatt tahe 5sumx ofs th}e sferi|es 51 +> 1/:16 5+ 1$/81$ + 51/2'56 5+ 1$/62'5 +> etac. 5alsfo dqepepndsf on{ th}e qduadqrataurep ofs th}e cvircvle.; Natmelyy, 5thep su`m ozf tahisf mu`lti|pli|ed 5by 590 5givces 5thep bi|quatdratte 5(fozurtah peowepr) 5of 5thep ci|rcu`mfepren{ce 5of 5thep peprimxetepr ozf at ci|rclye wbhosfe dqiamxetepr i|s 1$. ATnd 5by 5simxilatr rgeasfoni|ng 5I h}avep li|kewbisep bepen 5ablye tao dqeteprmi|ne 5thep su`ms 5of 5thep su`bsepquepnt 5sergiesf in{ wh}ich} th}e epxpoznen{ts 5arep evcen 5numxbergs.

In [112]: data[:5]
Out[112]: ['36', '22', '80', '0', '0']

In [113]: chr(35^101) + chr(22^120) + chr(80^112) + chr(0^101) + chr(0^120)
Out[113]: 'Fn ex'

In [114]: chr(36^101) + chr(22^120) + chr(80^112) + chr(0^101) + chr(0^120)
Out[114]: 'An ex'

In [115]: def decode(code):
     ...:     ...:     decoded = ''
     ...:     ...:     for i in range(len(data)):
     ...:     ...:         if i % 3 == 0:
     ...:     ...:             decoded += chr(int(data[i]) ^ code[0])
     ...:     ...:         if i % 3 == 1:
     ...:     ...:             decoded += chr(int(data[i]) ^ code[1])
     ...:     ...:         else:
     ...:     ...:             decoded += chr(int(data[i]) ^ code[2])
     ...:             return decoded
     ...: 

In [116]: def decode(code):
     ...:     decoded = ''
     ...:     for i in range(len(data)):
     ...:         if i % 3 == 0:
     ...:             decoded += chr(int(data[i]) ^ code[0])
     ...:         if i % 3 == 1:
     ...:             decoded += chr(int(data[i]) ^ code[1])
     ...:         if i % 3 == 2:
     ...:             decoded += chr(int(data[i]) ^ code[2])
     ...: 

In [117]: def decode(code):
     ...:     decoded = ''
     ...:     for i in range(len(data)):
     ...:         if i % 3 == 0:
     ...:             decoded += chr(int(data[i]) ^ code[0])
     ...:         if i % 3 == 1:
     ...:             decoded += chr(int(data[i]) ^ code[1])
     ...:         if i % 3 == 2:
     ...:             decoded += chr(int(data[i]) ^ code[2])
     ...:     return decoded
     ...: 

In [118]: answer = decode([101,120,112])

In [119]: print(answer)
An extract taken from the introduction of one of Euler's most celebrated papers, "De summis serierum reciprocarum" [On the sums of series of reciprocals]: I have recently found, quite unexpectedly, an elegant expression for the entire sum of this series 1 + 1/4 + 1/9 + 1/16 + etc., which depends on the quadrature of the circle, so that if the true sum of this series is obtained, from it at once the quadrature of the circle follows. Namely, I have found that the sum of this series is a sixth part of the square of the perimeter of the circle whose diameter is 1; or by putting the sum of this series equal to s, it has the ratio sqrt(6) multiplied by s to 1 of the perimeter to the diameter. I will soon show that the sum of this series to be approximately 1.644934066842264364; and from multiplying this number by six, and then taking the square root, the number 3.141592653589793238 is indeed produced, which expresses the perimeter of a circle whose diameter is 1. Following again the same steps by which I had arrived at this sum, I have discovered that the sum of the series 1 + 1/16 + 1/81 + 1/256 + 1/625 + etc. also depends on the quadrature of the circle. Namely, the sum of this multiplied by 90 gives the biquadrate (fourth power) of the circumference of the perimeter of a circle whose diameter is 1. And by similar reasoning I have likewise been able to determine the sums of the subsequent series in which the exponents are even numbers.

In [120]: for l in answer:
     ...:     print(ord(i))
     ...: 
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-120-aae96d04b5cd> in <module>
      1 for l in answer:
----> 2     print(ord(i))
      3 

TypeError: ord() expected string of length 1, but int found

In [121]: for l in answer:
     ...:     print(ord(l))
     ...: 
65
110
32
101
120
116
114
97
99
116
32
116
97
107
101
110
32
102
114
111
109
32
116
104
101
32
105
110
116
114
111
100
117
99
116
105
111
110
32
111
102
32
111
110
101
32
111
102
32
69
117
108
101
114
39
115
32
109
111
115
116
32
99
101
108
101
98
114
97
116
101
100
32
112
97
112
101
114
115
44
32
34
68
101
32
115
117
109
109
105
115
32
115
101
114
105
101
114
117
109
32
114
101
99
105
112
114
111
99
97
114
117
109
34
32
91
79
110
32
116
104
101
32
115
117
109
115
32
111
102
32
115
101
114
105
101
115
32
111
102
32
114
101
99
105
112
114
111
99
97
108
115
93
58
32
73
32
104
97
118
101
32
114
101
99
101
110
116
108
121
32
102
111
117
110
100
44
32
113
117
105
116
101
32
117
110
101
120
112
101
99
116
101
100
108
121
44
32
97
110
32
101
108
101
103
97
110
116
32
101
120
112
114
101
115
115
105
111
110
32
102
111
114
32
116
104
101
32
101
110
116
105
114
101
32
115
117
109
32
111
102
32
116
104
105
115
32
115
101
114
105
101
115
32
49
32
43
32
49
47
52
32
43
32
49
47
57
32
43
32
49
47
49
54
32
43
32
101
116
99
46
44
32
119
104
105
99
104
32
100
101
112
101
110
100
115
32
111
110
32
116
104
101
32
113
117
97
100
114
97
116
117
114
101
32
111
102
32
116
104
101
32
99
105
114
99
108
101
44
32
115
111
32
116
104
97
116
32
105
102
32
116
104
101
32
116
114
117
101
32
115
117
109
32
111
102
32
116
104
105
115
32
115
101
114
105
101
115
32
105
115
32
111
98
116
97
105
110
101
100
44
32
102
114
111
109
32
105
116
32
97
116
32
111
110
99
101
32
116
104
101
32
113
117
97
100
114
97
116
117
114
101
32
111
102
32
116
104
101
32
99
105
114
99
108
101
32
102
111
108
108
111
119
115
46
32
78
97
109
101
108
121
44
32
73
32
104
97
118
101
32
102
111
117
110
100
32
116
104
97
116
32
116
104
101
32
115
117
109
32
111
102
32
116
104
105
115
32
115
101
114
105
101
115
32
105
115
32
97
32
115
105
120
116
104
32
112
97
114
116
32
111
102
32
116
104
101
32
115
113
117
97
114
101
32
111
102
32
116
104
101
32
112
101
114
105
109
101
116
101
114
32
111
102
32
116
104
101
32
99
105
114
99
108
101
32
119
104
111
115
101
32
100
105
97
109
101
116
101
114
32
105
115
32
49
59
32
111
114
32
98
121
32
112
117
116
116
105
110
103
32
116
104
101
32
115
117
109
32
111
102
32
116
104
105
115
32
115
101
114
105
101
115
32
101
113
117
97
108
32
116
111
32
115
44
32
105
116
32
104
97
115
32
116
104
101
32
114
97
116
105
111
32
115
113
114
116
40
54
41
32
109
117
108
116
105
112
108
105
101
100
32
98
121
32
115
32
116
111
32
49
32
111
102
32
116
104
101
32
112
101
114
105
109
101
116
101
114
32
116
111
32
116
104
101
32
100
105
97
109
101
116
101
114
46
32
73
32
119
105
108
108
32
115
111
111
110
32
115
104
111
119
32
116
104
97
116
32
116
104
101
32
115
117
109
32
111
102
32
116
104
105
115
32
115
101
114
105
101
115
32
116
111
32
98
101
32
97
112
112
114
111
120
105
109
97
116
101
108
121
32
49
46
54
52
52
57
51
52
48
54
54
56
52
50
50
54
52
51
54
52
59
32
97
110
100
32
102
114
111
109
32
109
117
108
116
105
112
108
121
105
110
103
32
116
104
105
115
32
110
117
109
98
101
114
32
98
121
32
115
105
120
44
32
97
110
100
32
116
104
101
110
32
116
97
107
105
110
103
32
116
104
101
32
115
113
117
97
114
101
32
114
111
111
116
44
32
116
104
101
32
110
117
109
98
101
114
32
51
46
49
52
49
53
57
50
54
53
51
53
56
57
55
57
51
50
51
56
32
105
115
32
105
110
100
101
101
100
32
112
114
111
100
117
99
101
100
44
32
119
104
105
99
104
32
101
120
112
114
101
115
115
101
115
32
116
104
101
32
112
101
114
105
109
101
116
101
114
32
111
102
32
97
32
99
105
114
99
108
101
32
119
104
111
115
101
32
100
105
97
109
101
116
101
114
32
105
115
32
49
46
32
70
111
108
108
111
119
105
110
103
32
97
103
97
105
110
32
116
104
101
32
115
97
109
101
32
115
116
101
112
115
32
98
121
32
119
104
105
99
104
32
73
32
104
97
100
32
97
114
114
105
118
101
100
32
97
116
32
116
104
105
115
32
115
117
109
44
32
73
32
104
97
118
101
32
100
105
115
99
111
118
101
114
101
100
32
116
104
97
116
32
116
104
101
32
115
117
109
32
111
102
32
116
104
101
32
115
101
114
105
101
115
32
49
32
43
32
49
47
49
54
32
43
32
49
47
56
49
32
43
32
49
47
50
53
54
32
43
32
49
47
54
50
53
32
43
32
101
116
99
46
32
97
108
115
111
32
100
101
112
101
110
100
115
32
111
110
32
116
104
101
32
113
117
97
100
114
97
116
117
114
101
32
111
102
32
116
104
101
32
99
105
114
99
108
101
46
32
78
97
109
101
108
121
44
32
116
104
101
32
115
117
109
32
111
102
32
116
104
105
115
32
109
117
108
116
105
112
108
105
101
100
32
98
121
32
57
48
32
103
105
118
101
115
32
116
104
101
32
98
105
113
117
97
100
114
97
116
101
32
40
102
111
117
114
116
104
32
112
111
119
101
114
41
32
111
102
32
116
104
101
32
99
105
114
99
117
109
102
101
114
101
110
99
101
32
111
102
32
116
104
101
32
112
101
114
105
109
101
116
101
114
32
111
102
32
97
32
99
105
114
99
108
101
32
119
104
111
115
101
32
100
105
97
109
101
116
101
114
32
105
115
32
49
46
32
65
110
100
32
98
121
32
115
105
109
105
108
97
114
32
114
101
97
115
111
110
105
110
103
32
73
32
104
97
118
101
32
108
105
107
101
119
105
115
101
32
98
101
101
110
32
97
98
108
101
32
116
111
32
100
101
116
101
114
109
105
110
101
32
116
104
101
32
115
117
109
115
32
111
102
32
116
104
101
32
115
117
98
115
101
113
117
101
110
116
32
115
101
114
105
101
115
32
105
110
32
119
104
105
99
104
32
116
104
101
32
101
120
112
111
110
101
110
116
115
32
97
114
101
32
101
118
101
110
32
110
117
109
98
101
114
115
46

In [122]: sum = 0

In [123]: for l in answer:
     ...:     sum += ord(l)
     ...: 

In [124]: sum
Out[124]: 129448

In [125]: 
